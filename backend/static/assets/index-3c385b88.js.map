{"version":3,"file":"index-3c385b88.js","sources":["../../../frontend/personal-assistant/src/pages/layout/Layout.tsx","../../../frontend/personal-assistant/src/pages/NoPage.tsx","../../../frontend/personal-assistant/src/api/api.ts","../../../frontend/personal-assistant/src/api/models.ts","../../../frontend/personal-assistant/src/components/Answer/AnswerParser.tsx","../../../frontend/personal-assistant/src/components/Answer/AnswerIcon.tsx","../../../frontend/personal-assistant/src/components/Answer/Answer.tsx","../../../frontend/personal-assistant/src/components/Answer/AnswerLoading.tsx","../../../frontend/personal-assistant/src/components/Answer/AnswerError.tsx","../../../frontend/personal-assistant/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/personal-assistant/src/components/Example/Example.tsx","../../../frontend/personal-assistant/src/components/Example/ExampleList.tsx","../../../frontend/personal-assistant/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/personal-assistant/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/personal-assistant/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/personal-assistant/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/personal-assistant/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/personal-assistant/src/pages/chat/Chat.tsx","../../../frontend/personal-assistant/src/index.tsx"],"sourcesContent":["import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className='{styles.headerTitle}'>Personal Assistant</h3>\r\n                    </Link>\r\n                    <h4 className={styles.headerRightText}>Azure OpenAI + LangChain</h4>\r\n                \r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","const NoPage = () => {\r\n    return <h1>404</h1>;\r\n};\r\n\r\nexport default NoPage;\r\n","import { AskRequest, AskResponse, ChatRequest, ReadRequest, AskBingRequest, AskBingResponse } from \"./models\";\r\nimport {SpeechConfig, AudioConfig, SpeechSynthesizer, ResultReason} from \"microsoft-cognitiveservices-speech-sdk\"\r\n\r\n\r\nexport async function askBing(options: AskBingRequest): Promise<AskBingResponse> {\r\n    const response = await fetch(\"/askBing\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskBingResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/ask\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory,\r\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function readApi(options: ReadRequest): Promise<void>{\r\n    var speechConfig = SpeechConfig.fromSubscription('<your speech service key>','southeastasia');\r\n    const audioConfig = AudioConfig.fromDefaultSpeakerOutput();\r\n    // The language of the voice that speaks.\r\n    speechConfig.speechSynthesisVoiceName = \"zh-CN-YunxiNeural\"; \r\n    const synthesizer = new SpeechSynthesizer(speechConfig, audioConfig);\r\n    const text = options.answer;\r\n    const modified_text = text.replace(/\\[[^\\]]*\\]/g, \"\"); \r\n    console.log(options.answer);\r\n    synthesizer.speakTextAsync(modified_text,\r\n        function (result) {\r\n      if (result.reason === ResultReason.SynthesizingAudioCompleted) {\r\n        console.log(\"synthesis finished.\");\r\n      } else {\r\n        console.error(\"Speech synthesis canceled, \" + result.errorDetails +\r\n            \"\\nDid you set the speech resource key and region values?\");\r\n      }\r\n      synthesizer.close();\r\n    },\r\n        function (err) {\r\n      console.trace(\"err - \" + err);\r\n      synthesizer.close();\r\n    });\r\n\r\n}\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `/content/${citation}`;\r\n}\r\n","export const enum Approaches {\r\n    RetrieveThenRead = \"rtr\",\r\n    ReadRetrieveRead = \"rrr\",\r\n    ReadDecomposeAsk = \"rda\"\r\n}\r\n\r\nexport const enum CustomApproaches {\r\n    BingSearch = \"bing\"\r\n}\r\n\r\nexport type AskRequestOverrides = {\r\n    semanticRanker?: boolean;\r\n    semanticCaptions?: boolean;\r\n    excludeCategory?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    promptTemplate?: string;\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    suggestFollowupQuestions?: boolean;\r\n};\r\n\r\nexport type AskRequest = {\r\n    question: string;\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n};\r\n\r\nexport type AskBingRequest = {\r\n    question: string;\r\n    approach: CustomApproaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskBingResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n};\r\n\r\n\r\nexport type ChatTurn = {\r\n    user: string;\r\n    bot?: string;\r\n};\r\n\r\nexport type ChatRequest = {\r\n    history: ChatTurn[];\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type ReadRequest = {\r\n    answer: string;\r\n}\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: Citation[];\r\n    followupQuestions: string[];\r\n};\r\n\r\ntype Citation = {\r\n    id: number;\r\n    name: string;\r\n    path: string;\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: Citation[] = [];\r\n    const followupQuestions: string[] = [];\r\n\r\n    // Extract any follow-up questions that might be in the answer\r\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\r\n        followupQuestions.push(content);\r\n        return \"\";\r\n    });\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    parsedAnswer = parsedAnswer.trim();\r\n\r\n    // find information in string like '[info1.txt](http://www.example.com/info1.txt): info1' and extract info1.txt and http://www.example.com/info1.txt to be used as a link\r\n    // parsedAnswer = parsedAnswer.replace(/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g, (match, content, url) => {\r\n    //     const path = getCitationFilePath(content);\r\n    //     return renderToStaticMarkup(\r\n    //         <a className=\"supContainer\" title={content} onClick={() => onCitationClicked(path)}>\r\n    //             {content}\r\n    //         </a>\r\n    //     );\r\n    // });\r\n\r\n\r\n    // const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g);\r\n    // const part_paths = parsedAnswer.split(/\\(([^\\)]+)\\)/g);\r\n\r\n    console.log(parts);\r\n\r\n    let citation_map = parsedAnswer.match(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g) ;\r\n    console.log(citation_map);\r\n\r\n    citation_map ? citation_map.map((citation, index) => {\r\n        const name = citation.split(\"]\")[0].replace(\"[\", \"\");\r\n        const path = citation.split(\"]\")[1].replace(\"(\", \"\").replace(\")\", \"\");\r\n        console.log(name);\r\n        console.log(path);\r\n        citations.push({\r\n            id: index,\r\n            name: name,\r\n            path: path\r\n        });\r\n    }) : [];\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 3 === 0) {\r\n            return part;\r\n        } else if(index % 3 == 1){\r\n            // let citationIndex: number;\r\n            let cite = citations.find((citation) => citation.name == part);\r\n\r\n            let citationIndex = cite? cite.id : -1;\r\n\r\n            if (citationIndex !== -1) {\r\n                citationIndex = cite ? cite.id + 1 : -1;\r\n            } else {\r\n                // citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            // console.log(parts);\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        } else{\r\n            return \"\";\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations,\r\n        followupQuestions\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { AskResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: AskResponse;\r\n    isSelected?: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    onReadAnswerClicked: () => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    onReadAnswerClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.thoughts}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.data_points.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{color: \"black\"}}\r\n                            iconProps={{ iconName: \"ReadOutLoud\"}}\r\n                            title=\"Read answer\"\r\n                            ariaLabel=\"Read answer\"\r\n                            onClick={() => onReadAnswerClicked()}\r\n                            disabled= {!answer.answer}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>来源:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            // const path = getCitationFilePath(x);\r\n                            const path = x.path;\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x.name} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x.name}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>您可能还想问:</span>\r\n                        {parsedAnswer.followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        正在生成回答\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Send28Filled, BookOpenMicrophone28Regular } from \"@fluentui/react-icons\";\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            console.log('send disabled');\r\n            console.log('question: ' + question);\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || !question.trim();\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"语音输入\"\r\n                    onClick={sendQuestion}\r\n                >\r\n                    <BookOpenMicrophone28Regular primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"提问按钮\"\r\n                    onClick={sendQuestion}\r\n                >\r\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nexport type ExampleModel = {\r\n    text: string;\r\n    value: string;\r\n};\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"今天有没有3个人的会议室，要有TV的\",\r\n        value: \"今天有没有3个人的会议室，要有TV的\"\r\n    },\r\n    { text: \"今天深圳的天气怎么样\", value: \"今天深圳的天气怎么样\" },\r\n    { text: \"最近有什么好看的电影\", value: \"最近有什么好看的电影\" }\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {EXAMPLES.map((x, i) => (\r\n                <li key={i}>\r\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Pivot, PivotItem } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { AskResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: AskResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\r\n\r\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"思维过程\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Settings24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\r\n            <Settings24Regular />\r\n            <Text>{\"开发人员配置\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\r\n            <Delete24Regular />\r\n            <Text>{\"清空对话\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\r\nimport { SparkleFilled, StoreMicrosoftFilled } from \"@fluentui/react-icons\";\r\n\r\nimport {Icon} from \"../../components/Icon\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport { chatApi, Approaches, AskResponse, ChatRequest, ChatTurn, ReadRequest, readApi } from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(false);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(true);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                approach: Approaches.ReadRetrieveRead,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions,\r\n                    suggestFollowupQuestions: useSuggestFollowupQuestions\r\n                }\r\n            };\r\n            const result = await chatApi(request);\r\n            console.log(result)\r\n            setAnswers([...answers, [question, result]]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onReadAnswer = async (answer: AskResponse, index: number) => {\r\n        setSelectedAnswer(index);\r\n        try {\r\n            const request: ReadRequest = {\r\n                answer: answer.answer\r\n            };\r\n            await readApi(request);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            {/* <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" /> */}\r\n                            <StoreMicrosoftFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Assistant logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Your personal assistant</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                <div key={index}>\r\n                                    <UserChatMessage message={answer[0]} />\r\n                                    <div className={styles.chatMessageGpt}>\r\n                                        <Answer\r\n                                            key={index}\r\n                                            answer={answer[1]}\r\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                            onCitationClicked={c => onShowCitation(c, index)}\r\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            onReadAnswerClicked={() => onReadAnswer(answer[1], index)}\r\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"输入问题\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"配置\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"更改提问模板\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"最多从搜索中返回的条目数量:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n                    <TextField className={styles.chatSettingsSeparator} label=\"排除类别\" onChange={onExcludeCategoryChanged} />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label=\"使用语义搜索\"\r\n                        onChange={onUseSemanticRankerChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label=\"使用查询上下文摘要而不是整个文档\"\r\n                        onChange={onUseSemanticCaptionsChange}\r\n                        disabled={!useSemanticRanker}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"建议后续问题\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                    />\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport NoPage from \"./pages/NoPage\";\r\nimport Chat from \"./pages/chat/Chat\";\r\n\r\ninitializeIcons();\r\n\r\nexport default function App() {\r\n    return (\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Layout />}>\r\n                    <Route index element={<Chat />} />\r\n                    <Route path=\"*\" element={<NoPage />} />\r\n                </Route>\r\n            </Routes>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n);\r\n"],"names":["Layout","jsxs","styles","jsx","Link","Outlet","NoPage","chatApi","options","response","_a","_b","_c","_d","_e","_f","_g","_h","_i","parsedResponse","readApi","speechConfig","SpeechConfig","audioConfig","AudioConfig","synthesizer","SpeechSynthesizer","modified_text","result","ResultReason","err","getCitationFilePath","citation","Approaches","parseAnswerToHtml","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","parts","citation_map","index","name","path","part","cite","citationIndex","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","onReadAnswerClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","i","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","BookOpenMicrophone28Regular","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","Text","ClearChatButton","Delete24Regular","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","makeApiRequest","request","a","e","clearChat","useEffect","onPromptTemplateChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","example","onShowCitation","onToggleTab","tab","onReadAnswer","c","q","Fragment","StoreMicrosoftFilled","Panel","DefaultButton","SpinButton","Checkbox","initializeIcons","App","HashRouter","Routes","Route","ReactDOM","React"],"mappings":"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"}